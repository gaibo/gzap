ax.autoscale(enable=True, axis='x', tight=True)

##############################################################################

cds_index_dict = {'CDX NA IG': bbg_data['IBOXUMAE CBBT Curncy', 'PX_LAST'].dropna(),
                  'CDX NA HY': bbg_data['IBOXHYSE CBBT Curncy', 'PX_LAST'].dropna(),
                  'iTraxx EU Main': bbg_data['ITRXEBE CBBT Curncy', 'PX_LAST'].dropna(),
                  'iTraxx EU Xover': bbg_data['ITRXEXE CBBT Curncy', 'PX_LAST'].dropna(),
                  'iTraxx EU SenFin': bbg_data['ITRXESE CBBT Curncy', 'PX_LAST'].dropna()}

roll_dates_loc = 'P:/PrdDevSharedDB/BBG Pull Scripts/credit_roll_dates.csv'
roll_vals_loc = 'P:/PrdDevSharedDB/BBG Pull Scripts/credit_roll_prev_vals.csv'
roll_dates_df = pd.read_csv(roll_dates_loc, index_col='Unnamed: 0')
roll_vals_df = pd.read_csv(roll_vals_loc, index_col='Unnamed: 0')

names_list = ['CDX NA IG', 'CDX NA HY', 'iTraxx EU Main', 'iTraxx EU Xover', 'iTraxx EU SenFin']

scaled_cds_index_dict = {}
for name in names_list:
    cds_index = cds_index_dict[name]
    roll_dates_ser = roll_dates_df[name].dropna()   # Make sure no NaNs are involved
    current_roll_date = roll_dates_ser.iloc[-1]
    scaled_cds_index = cds_index.loc[current_roll_date:]  # Start with just the current series
    roll_vals_ser = roll_vals_df[name].dropna()
    series_countdown = roll_vals_ser.index[::-1]   # Start with recent series and go backwards
    for series in series_countdown:
        # If series is 32, then we scale 31 to 32's magnitude
        roll_date = roll_dates_ser.loc[series]
        prev_roll_date = roll_dates_ser.loc[series-1]
        try:
            new_val = scaled_cds_index.loc[roll_date]   # Get newly scaled roll date value
        except KeyError:
            continue
        old_val = roll_vals_ser.loc[series]
        new_old_ratio = new_val / old_val
        last_series = cds_index.loc[prev_roll_date:roll_date].iloc[:-1]     # Exclude day of roll
        scaled_last_series = last_series * new_old_ratio
        scaled_cds_index = pd.concat([scaled_last_series, scaled_cds_index])
    scaled_cds_index_dict[name] = scaled_cds_index

cds_index_df = pd.DataFrame.from_dict(cds_index_dict)
scaled_cds_index_df = pd.DataFrame.from_dict(scaled_cds_index_dict)

cds_index_df.plot()
scaled_cds_index_df.plot()

no_cdx_na_hy = scaled_cds_index_df.drop('CDX NA HY', axis=1)
no_cdx_na_hy.plot(color=['C0','C2','C3','C4'])
no_cdx_na_hy.to_csv('scaled_cds_indexes.csv')

##############################################################################

pd.set_option('display.max_rows', 30)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

import model.data_structures
import utility.graph_utilities
import importlib
importlib.reload(model.data_structures)
importlib.reload(utility.graph_utilities)

month_ret_ief = np.log(ief.price()).diff(21).dropna()
month_ret_vix = np.log(vix.price()).diff(21).dropna()
month_ret_tyvix = np.log(tyvix.price()).diff(21).dropna()
month_ret_spx = np.log(spx.price()).diff(21).dropna()
make_scatterplot(month_ret_vix, month_ret_ief)
make_scatterplot(month_ret_tyvix, month_ret_ief)
make_scatterplot(month_ret_vix, month_ret_spx)


spx_intraday_trade = pd.read_csv('data/spx_intraday_trade.csv')
combined_time = (spx_intraday_trade['TRADE_TIME'] +
                 ':' +
                 spx_intraday_trade['TRADE_TIME_THOU'].apply('{:0>3}'.format))
trade_time = pd.to_datetime(combined_time, format='%d%b%Y:%H:%M:%S:%f')


intraday_2015 = pd.read_csv('data/VIX_TYVIX_2015.csv')
intraday_2015['TRADE_DATE'] = pd.to_datetime(intraday_2015['TRADE_DATE'], format='%d%b%Y %H:%M:%S')
intraday_2015 = intraday_2015.set_index('TRADE_DATE')
intraday_2016 = pd.read_csv('data/VIX_TYVIX_2016.csv')
intraday_2016['TRADE_DATE'] = pd.to_datetime(intraday_2016['TRADE_DATE'], format='%d%b%Y %H:%M:%S')
intraday_2016 = intraday_2016.set_index('TRADE_DATE')
intraday = pd.concat([intraday_2015, intraday_2016]).sort_index()
intraday_VIX = intraday[intraday['UNDLY_INST_SYM']=='VIX'].drop('UNDLY_INST_SYM', axis=1)
intraday_TYVIX = intraday[intraday['UNDLY_INST_SYM']=='TYVIX'].drop('UNDLY_INST_SYM', axis=1)

intraday_vix_data = pd.read_csv('data/vix_intraday.csv', index_col='TRADE_DATE', parse_dates=True)
intraday_tyvix_data = pd.read_csv('data/tyvix_intraday.csv', index_col='TRADE_DATE', parse_dates=True)

vix_i = VolatilityIndex(intraday_vix_data, spx, 'VIX', vix_data.drop('VIX Close', axis=1))
tyvix_i = VolatilityIndex(intraday_tyvix_data, ty1, 'TYVIX', tyvix_data.drop('Close', axis=1))
